#!/bin/bash

## this is main file of analysis
## it takes command line arguments to perfrome specific analysis pipline.

# opens piplines script file
source config.sh 

# usage message
__usage="
GUAP v1.0
Usage: $(basename $0) [OPTIONS]

GUAP -i <inputdir> -o <outputdir> -c <analysis> -a <aligner> -t INT 

Options:
  -c <miRNA|kraken>                     Choose analysis                default = kraken
  -a <bwa|bowtie|bowtie2|hisat2>        Choose aligner                 default = miRNA
  -i <str>                              Input directory path
  -o <str>                              Output directory path
  -t <int>                              Number of threads              default = 50
  -m <first|second>                     miRNA pipeline choise
  -e <bash|snakemake|nextflow>          use snakemake, nextflow or bash
  -h                                    Help message ( This message )
  -y                                    skip continue check
  -k                                    Direct flag
"

# function to print usage message and exits 
usage() {
    echo -e "$__usage" 1>&2; exit 1
}

# assigns default value for miRNA analysis

m="first"
a="bowtie2"
c="kraken"
THREADS=50
e="snakemake"
y="FALSE"
k="FALSE"

# get command line arguments using getopts built in function
while getopts hm:i:o:t:a:c:e:yk OPTION
do
    case "${OPTION}"
    in
        a)
                    a=${OPTARG}
                    if [ "$a" == "bwa" ] || [ "$a" == "bowtie2" ] || [ "$a" == "bowtie" ] || [ "$a" == "hisat2" ]
                    then 
                        :
                    else
                        echo -e "${RED}$a is not a valid -a argument${NC}"
                    usage
                    fi
                    ;;
        c)
                    c=${OPTARG}
                    if [ "$c" == "miRNA" ] || [ "$c" == "kraken" ] || [ "$c" == "assemble" ]
                    then 
                        :
                    else
                        echo -e "${RED}$c is not a valid -c argument${NC}"
                    usage
                    fi
                    ;;
        i) INPUT=${OPTARG};; 
        o) OUTPUT=${OPTARG};;
        t) THREADS=${OPTARG};;
        m) m=${OPTARG};;        
        h) usage;;
        y) y="TRUE";;
        k) k="TRUE";;
        e)
                    e=${OPTARG}
                    if [ "$e" == "snakemake" ] || [ "$e" == "nextflow" ] || [ "$e" == "bash" ]
                    then 
                        :
                    else
                        echo -e "${RED}$e is not a valid -c argument${NC}"
                    usage
                    fi
                    ;;
        \?) usage;;
    esac
done

# checks if all mandatory arguments are called and prints usage if not
if [ -z "${INPUT}" ] || [ -z "${OUTPUT}" ] || [ -z "${c}" ]; then
    usage
fi
if [ "$c" == "miRNA" ];then 
    a="bowtie"
fi


ls ${INPUT} > /dev/null 2> /dev/null
lastexit=$?
if [[ $(( lastexit )) -ne 0 ]];then
    echo -e "${RED}ERROR ${YEL}'${INPUT}' ${RED}no such file or Drirectory${NC}"
    exit
fi

# User conformation
echo -e "${BLU}Engine choosen   : $e${NC}"
echo -e "${BLU}Alinger choosen  : $a${NC}"
echo -e "${BLU}Analysis choosen : $c${NC}"
if [ ${k} == "TRUE" ]; then echo -e "${BLU}Direct Kraken    : ${RED}TRUE${NC}"; else : ; fi

echo -e "${BLU}Input Directory  : ${INPUT}${NC}"
echo -e "${BLU}Output Directory : ${OUTPUT}${NC}"
echo -e "${BLU}Number of Threads: ${THREADS}${NC}"
if [ ${y} == "TRUE" ]; then echo -e "${BLU}Skip continue    : ${RED}TRUE${NC}"; else continue_ ; fi
# checks which pipline to proceed with 
if [ "$e" == "bash" ]
then
    ls ${INPUT} > /dev/null
    error_cheker $?
    if [ "$c" == "kraken" ]
    then
        if [ "$k" == "TRUE" ]; then kraken_Direct_prog $a $INPUT $THREADS $OUTPUT ;
        else
        kraken_pipeline_prog $a $INPUT $THREADS $OUTPUT 
        fi
    elif [ "$c" == "miRNA" ];then
        printf "${YEL}miRNA pipline is %s\n${NC}" "$m"
        if [ "$m" == "first" ];then # checks for miRNA pipline 
            miRNAtra1_pipeline $a $INPUT $THREADS $OUTPUT
        elif [ "$m" == "second" ];then
            miRNAtra2_pipeline $a $INPUT $THREADS $OUTPUT
        else
            echo -e "${YEL}No miRNA piplines choosen, first will continue${NC}"
            usage
        fi
    else
    usage
    fi
elif [ "$e" == "snakemake" ] # --quiet "use"
then
    echo -e "${YEL} snakemake running ${NC}"
    if [ "$c" == "kraken" ]
    then
        echo -e "${RED}KRAKEN SNAKEMAKE is under DEV...${NC}"
        usage
    elif [ "$c" == "miRNA" ];then
        cd ./snakemake/snakemake_miRNA
        echo -e "${GRE}printing config file${NC}"
        cat config.yaml | while read line; do echo -e "${YEL}${line}${NC}"; done 
        if [ ${y} == "TRUE" ]; then :; else continue_ ; fi
    else
    usage
    fi
elif [ "$e" == "nextflow" ]
then
    echo -e "${RED}NEXTFLOW is under DEV...${NC}"
    usage
else
usage
fi
echo -e "${GRE}analysis from main DONE${NC}"
